import { Component, Input, Output, OnDestroy, OnInit } from '@angular/core';
import { NgbModal, NgbModalRef, NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';
import { ModalConfig } from '../../../../../shared/components/modal/oldModal/modal';
import { LightningService } from 'app/models/lightning';
import { Router, NavigationStart } from '@angular/router';
import { EventEmitter } from 'events';
import getUnixTime from 'date-fns/getUnixTime';
import { SocialShareConfig, SocialShareStyle } from 'app/shared/components/social-share/social-share';
import { TranslateService } from '@ngx-translate/core';
import AppSettings from 'app/app.settings';

export function openModalPayment(modalService: NgbModal, config: ModalConfig): NgbModalRef {
	const modalRef: NgbModalRef = modalService.open(ModalPaymentComponent, {
		size: 'lg'
	});
	modalRef.componentInstance.config = config;
	// modalRef.result.then((v) => {  }, () => { });

	return modalRef;
}

@Component({
	selector: 'modal-payment',
	templateUrl: 'payment.html',
	styleUrls: ['payment.scss']
})
export class ModalPaymentComponent implements OnInit, OnDestroy{
	@Input() config: ModalConfig & {
		nodeOnline: boolean;
		paymentValue: number;
		amountBTC: number;
		invoice: string;
	};
	@Output() onSuccess: EventEmitter;

	countdownConfig: {
		duration: number;
		show: string[];
		destroy: boolean;
	};
	invoice: any;
	intervalPolling: any;
	socialShare: {
		config: SocialShareConfig;
		style: SocialShareStyle;
	};

	constructor(
		private translate: TranslateService,
		private lightningService: LightningService,
		public activeModal: NgbActiveModal,
		private router: Router) {		
		this.onSuccess = new EventEmitter();

		const start = getUnixTime(new Date(this.invoice.created_at));
		const end = getUnixTime(new Date(this.invoice.expires_at));

		this.countdownConfig = {
			duration: end - start,
			show: ['hours', 'minutes', 'seconds'],
			destroy: false
		};

		this.socialShare = {
			config: {
				title: this.translate.instant('I\'ve just donated trought the charity pot of helperbit.com! Discover how to donate immediatly without fee!'),
				hashtags: [this.translate.instant('helperbit'), this.translate.instant('charity-pot'), this.translate.instant('donation'), this.translate.instant('satoshi')],
				url: AppSettings.urls.public.charityPot
			},
			style: {
				// type: 'circle',
				colored: true,
				size: 1.5
			}
		};

		this.checkInvoiceStatus();
	}

	ngOnInit() {
		this.router.events.subscribe(e => {
			if (e instanceof NavigationStart) {
				this.ngOnDestroy();
			}
		});
	}

	ngOnDestroy() {
		this.deletePolling();
		this.activeModal.dismiss();
	}

	private newRequestCode() {
		$('#' + this.config.id).modal('hide');

		$('#' + this.config.id).on('hidden.bs.modal', function (e) {
			this.pay();
		});
	}

	private checkInvoiceStatus() {
		this.intervalPolling = setInterval(() => {
			this.lightningService.getInvoice(this.invoice.invoiceid, true).subscribe(invoice => {
				if (invoice.status == 'paid' || invoice.status == 'expired') {
					this.invoice = invoice;
					this.deletePolling();

					if (invoice.status == 'paid')
						this.onSuccess.emit(null);
				}
			});
		}, 2500);
	}

	private deletePolling() {
		clearInterval(this.intervalPolling);

		this.countdownConfig.destroy = true;
	}
}